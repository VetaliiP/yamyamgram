import React from 'react';
import { useForm } from 'react-hook-form';
import * as yup from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';
import { Button, TextField, Typography, Box } from '@mui/material';

// üîß –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ö–µ–º—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Yup
const schema = yup.object({
    name: yup.string().required('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ').min(2, '–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'),
    email: yup.string().required('Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω').email('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email'),
});

type FormData = yup.InferType<typeof schema>;

const FormPage = () => {
    const {
        register,
        handleSubmit,
        formState: { errors },
    } = useForm<FormData>({
        resolver: yupResolver(schema),
    });

    const onSubmit = (data: FormData) => {
        console.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', data);
    };

    return (
        <Box
            component="form"
            onSubmit={handleSubmit(onSubmit)}
            noValidate
            sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}
        >
            <Typography variant="h5">–§–æ—Ä–º–∞</Typography>

            <TextField
                label="–ò–º—è"
                {...register('name')}
                error={!!errors.name}
                helperText={errors.name?.message}
            />

            <TextField
                label="Email"
                {...register('email')}
                error={!!errors.email}
                helperText={errors.email?.message}
            />

            <Button variant="contained" type="submit">
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </Button>
        </Box>
    );
};

export default FormPage;
